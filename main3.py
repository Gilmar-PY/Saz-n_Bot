import pandas as pd
import streamlit as st
from datetime import datetime
from copy import deepcopy
import openai
import csv
import re
import pytz
import json
import logging

# Configura el logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Inicializar el cliente de OpenAI con la clave API
openai.api_key = st.secrets["OPENAI"]["API_KEY"]

# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Saz√≥nBot", page_icon=":pot_of_food:")
st.title("üç≤ Saz√≥nBot")

# Mensaje de bienvenida
intro = """¬°Bienvenido a Saz√≥n Bot, el lugar donde todos tus antojos de almuerzo se hacen realidad!
Comienza a chatear con Saz√≥n Bot y descubre qu√© puedes pedir, cu√°nto cuesta y c√≥mo realizar tu pago. ¬°Estamos aqu√≠ para ayudarte a disfrutar del mejor almuerzo!"""
st.markdown(intro)


# Cargar el men√∫ desde un archivo CSV
def load(file_path):
    """Cargar el men√∫ desde un archivo CSV con columnas Plato, Descripci√≥n y Precio."""
    return pd.read_csv(file_path)

# Mostrar el men√∫ con descripciones
def format_menu(menu):
    if menu.empty:
        return "No hay platos disponibles."
    else:
        # Encabezados de la tabla
        table = "| **Plato** | **Descripci√≥n** | **Precio** |\n"
        table += "|-----------|-----------------|-------------|\n"  # L√≠nea de separaci√≥n
        
        # Filas de la tabla
        for idx, row in menu.iterrows():
            table += f"| {row['Plato']} | {row['Descripci√≥n']} | S/{row['Precio']:.2f} |\n"
        
        return table


# Mostrar el men√∫ con descripciones
def display_menu(menu):
    """Mostrar el men√∫ con descripciones."""
    menu_text = "Aqu√≠ est√° nuestra carta:\n"
    for index, row in menu.iterrows():
        menu_text += f"{row['Plato']}: {row['Descripci√≥n']} - {row['Precio']} soles\n"
    return menu_text

# Mostrar los distritos de reparto
def display_distritos(distritos):
    """Mostrar los distritos de reparto disponibles."""
    distritos_text = "Los distritos de reparto son:\n"
    for index, row in distritos.iterrows():
        distritos_text += f"**{row['Distrito']}**\n"
    return distritos_text

# Cargar el men√∫ y distritos
menu = load("carta.csv")
distritos = load("distritos.csv")
bebidas= load("Bebidas.csv")
postres= load("Postres.csv")

# Generar tabla de pedido confirmado
def display_confirmed_order(order_details):
    """Genera una tabla en formato Markdown para el pedido confirmado."""
    table = "| **Plato** | **Cantidad** | **Precio Total** |\n"
    table += "|-----------|--------------|------------------|\n"
    for item in order_details:
        table += f"| {item['Plato']} | {item['Cantidad']} | S/{item['Precio Total']:.2f} |\n"
    table += "| **Total** |              | **S/ {:.2f}**      |\n".format(sum(item['Precio Total'] for item in order_details))
    return table

def get_system_prompt(menu, distritos):
    """Define el prompt del sistema para el bot de Saz√≥n incluyendo el men√∫ y distritos."""
    lima_tz = pytz.timezone('America/Lima')  # Define la zona horaria de Lima
    hora_lima = datetime.now(lima_tz).strftime("%Y-%m-%d %H:%M:%S")  # Obtiene la hora actual en Lima
    system_prompt = f"""
    Eres el bot de pedidos de Saz√≥n, amable y servicial. Ayudas a los clientes a hacer sus pedidos y siempre confirmas que solo pidan platos que est√°n en el men√∫ oficial. Aqu√≠ tienes el men√∫ para mostr√°rselo a los clientes:\n{display_menu(menu)}\n
    Tambi√©n repartimos en los siguientes distritos: {display_distritos(distritos)}.\n
    Primero, saluda al cliente y ofr√©cele el men√∫. Aseg√∫rate de que el cliente solo seleccione platos que est√°n en el men√∫ actual y expl√≠cales que no podemos preparar platos fuera del men√∫.
    El cliente puede indicar la cantidad en texto o en n√∫meros.
    **IMPORTANTE: Validaci√≥n de cantidad solicitada**
    - Si la cantidad solicitada est√° en el rango de 1 a 100 (inclusive), acepta el pedido sin mostrar advertencias.
    - Si la cantidad solicitada es mayor que 100, muestra el siguiente mensaje:
      "Lamento informarte que el l√≠mite m√°ximo de cantidad por producto es de 100 unidades. Por favor, reduce la cantidad para procesar tu pedido."
    
    Pregunta si desea recoger su pedido en el local o si prefiere entrega a domicilio. 
    Si elige entrega, preg√∫ntale al cliente a qu√© distrito desea que se le env√≠e su pedido, confirma que el distrito est√© dentro de las zonas de reparto y verifica el distrito de entrega con el cliente.
    Si el pedido es para recoger, inv√≠talo a acercarse a nuestro local ubicado en UPCH123.
    
    Usa solo espa√±ol peruano en tus respuestas.
    
    Antes de continuar, confirma que el cliente haya ingresado un m√©todo de entrega v√°lido. Luego, resume el pedido en la siguiente tabla:\n
    | **Plato**      | **Cantidad** | **Precio Total** |\n
    |----------------|--------------|------------------|\n
    |                |              |                  |\n
    | **Total**      |              | **S/ 0.00**      |\n
    
    Pregunta al cliente si quiere a√±adir una bebida o postre. 
    - Si responde bebida, mu√©strale √∫nicamente la carta de bebidas {display_menu(bebidas)}.
    - Si responde postre, mu√©strale solo la carta de postres {display_menu(postres)}.
    
    Si el cliente agrega postres o bebidas, incorp√≥ralos en la tabla de resumen como un plato adicional y calcula el monto total nuevamente.
    
    Pregunta al cliente: "¬øEst√°s de acuerdo con el pedido?" y espera su confirmaci√≥n. 
    
    Luego, si confirma, pide el m√©todo de pago (tarjeta de cr√©dito, efectivo u otra opci√≥n disponible). Verifica que haya ingresado un m√©todo de pago antes de continuar.
    
    Una vez que el cliente confirme el m√©todo de pago, registra la hora actual de Per√∫ como el timestamp {hora_lima} de la confirmaci√≥n. 
    El pedido confirmado ser√°:\n
    {display_confirmed_order([{'Plato': '', 'Cantidad': 0, 'Precio Total': 0}])}\n
    
    Recuerda siempre confirmar que el pedido y el m√©todo de pago est√©n completos antes de registrarlo.
    """
    return system_prompt.replace("\n", " ")

def generate_response(prompt, temperature=0.5, max_tokens=1000):
    """Enviar el prompt a OpenAI y devolver la respuesta."""
    st.session_state["messages"].append({"role": "user", "content": prompt})

    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=st.session_state["messages"],
        temperature=temperature,
        max_tokens=max_tokens,
        stream=False,
    )
    response = completion.choices[0].message['content']
    st.session_state["messages"].append({"role": "assistant", "content": response})

    return response

# Estado inicial
initial_state = [
    {"role": "system", "content": get_system_prompt(menu, distritos)},
    {
        "role": "assistant",
        "content": f"¬øQu√© te puedo ofrecer?\n\nEste es el men√∫ del d√≠a:\n\n{format_menu(menu)}",
    },
]

# Inicializar el historial de mensajes
if "messages" not in st.session_state:
    st.session_state["messages"] = deepcopy(initial_state)

# Bot√≥n para eliminar la conversaci√≥n
clear_button = st.button("Eliminar conversaci√≥n", key="clear")
if clear_button:
    st.session_state["messages"] = deepcopy(initial_state)

# Mostrar el historial de mensajes
for message in st.session_state.messages:
    if message["role"] == "assistant":
        with st.chat_message("assistant", avatar="üë®‚Äçüç≥"):
            st.markdown(message["content"])
    else:
        with st.chat_message("user", avatar="üë§"):
            st.markdown(message["content"])

# Input del usuario
if prompt := st.chat_input():
    with st.chat_message("user", avatar="üë§"):
        st.markdown(prompt)

    output = generate_response(prompt)
    with st.chat_message("assistant", avatar="üë®‚Äçüç≥"):
        st.markdown(output)
